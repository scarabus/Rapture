import groovy.text.SimpleTemplateEngine

import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.bundling.Zip

import sun.security.util.Resources_de;

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
}

license {
    header file('./LICENSE')
}

apply plugin: "sonar"

project.group = 'net.rapture'

ext { platformVersion = '3.0.2' }


subprojects {

    project.group = parent.group

    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'maven'
    apply plugin: "com.github.hierynomus.license"

    license {
        header rootProject.file('LICENSE')
    }

    repositories {
      mavenLocal()
      mavenCentral()
      jcenter()
      maven {
        url "https://oss.sonatype.org/content/repositories/releases/"
      }
      }

    def loggingVersion = '1.6.1'
    def httpVersion = '4.2.2'
    def jacksonVersion = '1.9.2'

    task copyProps(type:Copy) {
        from 'src/main/java'
        into 'build/classes/main'
        include '**/*.txt', '**/*.xml', '**/*.properties', '**/*.proto'
    }

    compileJava {
        dependsOn copyProps
    }

    test {
        include 'rapture/**'

        // set JVM arguments for the test JVM(s)
        jvmArgs '-noverify'
    }

    plugins.withType(ApplicationPlugin) {

        final RAPTURE_CONFIG_DIR = 'rapture/config';
        task generateApplicationConfig {
            description 'Generates the application configuration file'
            def output = file('build/config/' + RAPTURE_CONFIG_DIR + '/RaptureAPPLICATION.cfg')
            outputs.files output
            outputs.upToDateWhen { false }
            doLast {
                def templ = '''
    # Application Configuration
    # Auto generated
    APIVersion=${version}
    '''
                def binding = [ 'version' : project.version ]
                def writable = new SimpleTemplateEngine().createTemplate(templ).make(binding)
                File dir = output.getParentFile()
                dir.mkdirs()
                def destination = new FileWriter(output)
                writable.writeTo(destination)
                destination.flush()
                destination.close()
                println("Created application configuration")
            }
        }

        task copyConfigFiles (type: Copy) {
            dependsOn generateApplicationConfig
            from 'src/main/resources';
            include RAPTURE_CONFIG_DIR + '/*.cfg'
            into 'build/config'
            outputs.upToDateWhen { false }
        }

        task copyWebApplication(type: Copy) {
            dependsOn copyConfigFiles
            from 'src/main/webapp'
            into 'build/webapp'
        }

        jar {
            manifest {
                attributes "Implementation-Vendor" : "Incapture Technologies"
                attributes "Built-By" : System.getProperty('user.name')
            }
        }

        task targetConfig {
            outputs.dir file("$buildDir/config")
        }

        applicationDistribution.from(targetConfig) { into "etc" }
    }

    tasks.withType(Zip) { task ->
        task.doLast {
            ant.checksum file: it.archivePath
        }
    }

    dependencies {
        compile "net.rapture:RaptureAppConfig:$project.platformVersion"
        compile "net.rapture:RaptureAPI:$project.platformVersion"
        compile "net.rapture:Reflex:$project.platformVersion"
        compile 'log4j:log4j:1.2.14'
        compile "org.slf4j:jcl-over-slf4j:$loggingVersion"
        compile "org.slf4j:slf4j-api:$loggingVersion"
        compile "org.slf4j:slf4j-log4j12:$loggingVersion"
        testCompile 'junit:junit:4.10'
        testCompile 'org.testng:testng:6.8.7'
        testCompile 'com.googlecode.catch-exception:catch-exception:1.0.4'
        testCompile 'org.objenesis:objenesis:2.0'
        testCompile 'org.powermock:powermock-module-junit4:1.5.1'
        testCompile 'org.powermock:powermock-api-easymock:1.5.1'
        testCompile 'org.easymock:easymock:3.2'
    }
}
