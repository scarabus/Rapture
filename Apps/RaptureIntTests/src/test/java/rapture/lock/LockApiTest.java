/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.lock;

import static org.testng.AssertJUnit.assertNotNull;
import static org.testng.AssertJUnit.assertNull;

import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import rapture.common.LockHandle;
import rapture.common.RaptureLockConfig;
import rapture.common.RaptureURI;
import rapture.common.Scheme;
import rapture.common.client.HttpAdminApi;
import rapture.common.client.HttpDocApi;
import rapture.common.client.HttpLockApi;
import rapture.common.client.HttpLoginApi;
import rapture.common.impl.jackson.MD5Utils;
import rapture.helper.IntegrationTestHelper;


//TODO: so MUCH repeated code here ... needs a good refactor. JM 04/16/2014
//TODO: when this (https://incapture.atlassian.net/browse/RAP-2268) is implemented we can clean up the lock auths

public class LockApiTest {
    
    private IntegrationTestHelper helper;
    private HttpLoginApi raptureLogin = null;
    private HttpDocApi docApi = null;
    private HttpLockApi lockApi = null;
    private HttpAdminApi admin = null;

    private static final String user = "User";
    private IntegrationTestHelper helper2;
    private HttpDocApi docApi2 = null;
    private HttpLockApi lockApi2 = null;
    private HttpLoginApi raptureLogin2 = null;
    private RaptureURI repoUri = null;

    @BeforeClass(groups = { "nightly" })
    @Parameters({ "RaptureURL", "RaptureUser", "RapturePassword" })
    public void setUp(@Optional("http://localhost:8665/rapture") String url, @Optional("rapture") String username, @Optional("rapture") String password) {

        helper = new IntegrationTestHelper(url, username, password);
        raptureLogin = helper.getRaptureLogin();
        docApi = helper.getDocApi();
        lockApi = helper.getLockApi();
        admin = helper.getAdminApi();
        if (!admin.doesUserExist(user)) {
            admin.addUser(user, "Another User", MD5Utils.hash16(user), "user@incapture.net");
        }

        helper2 = new IntegrationTestHelper(url, user, user);
        docApi2 = helper2.getDocApi();
        lockApi2 = helper2.getLockApi();

        repoUri = helper.getRandomAuthority(Scheme.DOCUMENT);
        helper.configureTestRepo(repoUri, "MONGODB"); // TODO Make this configurable
    }

    @AfterClass(groups = { "nightly" })
    public void tearDown() {
    }
        
    @Test(groups = { "nightly" }, enabled = true)
    public void testLock() throws InterruptedException {

        // Player 1 acquires a lock
        RaptureURI lockUri = RaptureURI.builder(helper.getRandomAuthority(Scheme.DOCUMENT)).docPath("foo/bar").build();
        RaptureLockConfig lockConfig = lockApi.createLockManager(lockUri.toString(), "LOCKING USING MONGODB {}", "");
        assertNotNull(lockConfig);
        LockHandle lockHandle = lockApi.acquireLock(lockUri.toString(), lockConfig.getName(), 1, 60);
        assertNotNull(lockHandle);
        Thread.sleep(100);

        // Meanwhile elsewhere Player 2 tries to acquire the lock
        RaptureLockConfig lockConfig2 = lockApi.createLockManager(lockUri.toString(), "LOCKING USING MONGODB {}", "");
        assertNotNull(lockConfig2);
        LockHandle lockHandle2 = lockApi2.acquireLock(lockUri.toString(), lockConfig2.getName(), 1, 60);
        // but fails
        assertNull(lockHandle2);

        // Eventually player1 releases the lock
        Thread.sleep(100);
        lockApi.releaseLock(lockUri.toString(), lockConfig.getName(), lockHandle);

        // and now Player 2 can acquire it
        lockHandle2 = lockApi2.acquireLock(lockUri.toString(), lockConfig2.getName(), 1, 60);
        assertNotNull(lockHandle2);
        lockApi2.releaseLock(lockUri.toString(), lockConfig2.getName(), lockHandle2);

        lockApi.deleteLockManager(lockUri.toString());
    }
    
}
