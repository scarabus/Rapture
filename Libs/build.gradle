
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
  }
}

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
}

license {
    header file('./LICENSE')
}

project.version = '3.0.2'
project.group = 'net.rapture'

subprojects {
    repositories {
      mavenLocal()
      mavenCentral()
      jcenter()
      }

    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: "com.github.hierynomus.license"

    project.ext {
        generatedMainJava = "$buildDir/generated-sources/main/java"
        generatedMainRes = "$buildDir/generated-sources/main/resources"
        generatedTestJava = "$buildDir/generated-sources/test/java"
        generatedTestRes = "$buildDir/generated-sources/test/resources"
    }

    addPathFromProperty(project, "main", "java", "generatedMainJava")
    addPathFromProperty(project, "test", "java", "generatedTestJava")
    addPathFromProperty(project, "main", "resources", "generatedMainRes")
    addPathFromProperty(project, "test", "resources", "generatedTestRes")

    license {
        header rootProject.file('LICENSE')
        ignoreFailures = true
    }

    project.group = parent.group
    project.version = parent.version

    def loggingVersion = '1.6.1'
    def httpVersion = '4.2.2'

    // Include messages/bundle properties files from the java area

    task copyProps(type: Copy) {
        from 'src/main/java'
        into 'build/classes/main'
        include '**/*.txt', '**/*.xml', '**/*.properties', '**/*.proto'
    }

    compileJava.dependsOn(copyProps)

    test {
        include 'rapture/**'
        include 'reflex/**'
        include 'config/**'

        // set JVM arguments for the test JVM(s)
        jvmArgs '-noverify'
    }

    jar {
        manifest {
            attributes "Implementation-Vendor": "Incapture Technologies"
            attributes "Implementation-Version": project.version
            attributes "Built-By": System.getProperty('user.name')
        }
    }

    task jarTest (type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    configurations {
        testOutput
    }

    artifacts {
        testOutput jarTest
    }

    dependencies {
        compile "org.apache.httpcomponents:httpcore:$httpVersion"
        compile "org.apache.httpcomponents:httpcore-nio:$httpVersion"
        compile "org.apache.httpcomponents:httpclient:$httpVersion"
        compile "org.apache.httpcomponents:httpmime:$httpVersion"
        compile 'joda-time:joda-time:2.1'
        compile 'commons-cli:commons-cli:1.1'
        compile 'commons-io:commons-io:2.0'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.5.4'
        compile "log4j:log4j:1.2.17"
        compile "org.slf4j:jcl-over-slf4j:$loggingVersion"
        compile "org.slf4j:slf4j-api:$loggingVersion"
        compile "org.slf4j:slf4j-log4j12:$loggingVersion"
        testCompile 'junit:junit:4.10'
        testCompile 'org.testng:testng:6.8.7'
        testCompile 'com.googlecode.catch-exception:catch-exception:1.0.4'
        testCompile 'org.objenesis:objenesis:2.0'
        testCompile 'org.powermock:powermock-module-junit4:1.5.1'
        testCompile 'org.powermock:powermock-api-easymock:1.5.1'
        testCompile 'org.easymock:easymock:3.2'
    }



}

public static void addPathFromProperty(Project project, String first, String second, String property) {
    if (property != null && project.hasProperty(property)) {
        String path = project.ext."$property"
        addPath(project, first, second, path)
    }
}

public static void addPath(Project project, String first, String second, String path) {
    File file = new File(path)
    if (project.hasProperty('sourceSets') && project.sourceSets.hasProperty(first) && project.sourceSets."$first".hasProperty(second)) {
        project.sourceSets."$first"."$second".srcDir path
    }
}



apply plugin: 'io.codearte.nexus-staging'


    subprojects {

       javadoc {
          failOnError = false
       }
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }
    }

    allprojects {
       apply plugin: 'maven'

if (hasProperty('ossrhUser')) {
        apply plugin: 'signing'
          // Signature of artifacts
        signing {
            sign configurations.archives
        }

       // OSSRH publication
uploadArchives {
    repositories {
        mavenDeployer {
            // POM signature
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            // Target repository
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }

            snapshotRepository( url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }
            pom.project {
                name project.name
                description project.description
                packaging 'jar'
                url 'https://github.com/RapturePlatform/Rapture.git'

                scm {
                    connection 'scm:git:https://github.com/RapturePlatform/Rapture.git'
                    developerConnection 'scm:git:git@github.com:RapturePlatform/Rapture.git'
                    url 'https://github.com/RapturePlatform/Rapture.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }
                developers {
                            developer {
                                id = 'ukmoore'
                                name = 'Alan Moore'
                                email = 'alan.moore@incapturetechnologies.com'
                            }
                        }
                    }
                }
            }
        }

}
    }

if (hasProperty('ossrhUser')) {
nexusStaging {
    username = ossrhUser
    password = ossrhPassword
}
}
